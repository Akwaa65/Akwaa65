<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8">
<title>Générateur de Carte Grise RP - Canvas</title>
<style>
body { font-family: Arial; background-color: #ecf0f1; display: flex; flex-direction: column; align-items: center; padding: 30px; }
.formulaire { background-color: #2c3e50; padding: 20px 30px; border-radius: 12px; box-shadow: 0 4px 10px rgba(0,0,0,0.3); color: white; width: fit-content; margin-bottom: 20px; }
.formulaire label { display: block; margin-bottom: 10px; font-size: 18px; }
.formulaire input, .formulaire select { padding: 6px 10px; border-radius: 6px; border: none; margin-left: 10px; font-size: 16px; }
.formulaire input:focus, .formulaire select:focus { outline: 2px solid #3498db; }
#btnGenerate, #btnDownload { margin-top: 10px; padding: 10px 20px; background-color: #3498db; border: none; border-radius: 8px; color: white; font-weight: bold; cursor: pointer; transition: all 0.2s ease; margin-right: 10px; }
#btnGenerate:hover, #btnDownload:hover { background-color: #2980b9; }
canvas { border: 1px solid #999; margin-top: 20px; }
#loadingBarContainer { width: 500px; height: 20px; background: #ccc; border-radius: 10px; overflow: hidden; margin-top: 20px; display: none; }
#loadingBar { width: 0%; height: 100%; background: #3498db; transition: width 0.2s ease; }
#loadingText { margin-top: 5px; font-weight: bold; color: #2c3e50; }
</style>
</head>
<body>

<div class="formulaire">
  <label>Nom et Prénom: <input type="text" id="inputIdentite"></label>
  <label>Immatriculation: <input type="text" id="inputImmatriculation"></label>
  <label>Modèle:
    <select id="modele">
      <option value="">-- Choisir --</option>
      <option value="adder" data-nom="Truffade Adder">Adder</option>
      <option value="sultan" data-nom="Karin Sultan">Sultan</option>
      <option value="banshee" data-nom="Bravado Banshee">Banshee</option>
      <option value="tailgater_s" data-nom="TAILGATER S">Tailgater S</option>
    </select>
  </label>
  <button id="btnGenerate">Générer</button>
  <button id="btnDownload">Télécharger</button>
</div>

<div id="loadingBarContainer">
  <div id="loadingBar"></div>
</div>
<div id="loadingText"></div>

<canvas id="carteCanvas" width="1500" height="900"></canvas>

<script>
const inputIdentite = document.getElementById("inputIdentite");
const inputImmatriculation = document.getElementById("inputImmatriculation");
const modeleSelect = document.getElementById("modele");
const btnGenerate = document.getElementById("btnGenerate");
const btnDownload = document.getElementById("btnDownload");
const canvas = document.getElementById("carteCanvas");
const ctx = canvas.getContext("2d");
const loadingBarContainer = document.getElementById("loadingBarContainer");
const loadingBar = document.getElementById("loadingBar");
const loadingText = document.getElementById("loadingText");

let lastCanvasData = null;
const imagesCache = {};

// Fonction de préchargement
function preloadImage(src) {
  return new Promise(resolve => {
    if(imagesCache[src]) return resolve(imagesCache[src]);
    const img = new Image();
    img.src = src;
    img.onload = () => { imagesCache[src] = img; resolve(img); };
  });
}

// Précharger toutes les images au démarrage
async function preloadAllImages() {
  const imgs = [
    "carte-grise.png",
    "images/adder.png",
    "images/sultan.png",
    "images/banshee.png",
    "images/tailgater_s.png"
  ];
  loadingBarContainer.style.display = "block";
  loadingText.textContent = "Préchargement des images...";
  let loadedCount = 0;
  for(const src of imgs){
    await preloadImage(src);
    loadedCount++;
    const percent = Math.floor((loadedCount / imgs.length) * 100);
    loadingBar.style.width = percent + "%";
  }
  loadingBarContainer.style.display = "none";
  loadingBar.style.width = "0%";
  loadingText.textContent = "";
}

window.addEventListener("load", preloadAllImages);

btnGenerate.addEventListener("click", async () => {
  const nomPrenom = inputIdentite.value;
  const immatriculation = inputImmatriculation.value;
  const modeleOption = modeleSelect.options[modeleSelect.selectedIndex];
  const modeleNom = modeleOption.getAttribute("data-nom");
  const modeleValue = modeleOption.value;

  ctx.clearRect(0,0,canvas.width,canvas.height);

  // Afficher barre de chargement pendant génération
  loadingBarContainer.style.display = "block";
  loadingBar.style.width = "0%";
  loadingText.textContent = "Génération en cours...";

  // Charger images depuis cache
  const carteImg = imagesCache["carte-grise.png"];
  ctx.drawImage(carteImg,0,0,canvas.width,canvas.height);
  let percent = 50;

  if(modeleValue){
    const vehiculeImg = imagesCache["images/" + modeleValue + ".png"];
    // conserver ratio
    const maxWidth = 675;
    const maxHeight = 450;
    const ratio = vehiculeImg.width / vehiculeImg.height;
    let drawWidth = maxWidth;
    let drawHeight = maxHeight;
    if(ratio > maxWidth/maxHeight) drawHeight = maxWidth/ratio;
    else drawWidth = maxHeight*ratio;
    const offsetX = 25 + (maxWidth - drawWidth)/2;
    const offsetY = 300 + (maxHeight - drawHeight)/2;
    ctx.drawImage(vehiculeImg, offsetX, offsetY, drawWidth, drawHeight);
  }
  percent = 80;
  loadingBar.style.width = percent + "%";

  // Dessiner textes
  ctx.font = "32px Arial Black";
  ctx.fillStyle = "white";
  ctx.strokeStyle = "black";
  ctx.lineWidth = 3;

  ctx.strokeText(nomPrenom, 790, 360);
  ctx.fillText(nomPrenom, 790, 360);

  ctx.strokeText(modeleNom||"", 790, 550);
  ctx.fillText(modeleNom||"", 790, 550);

  ctx.strokeText(immatriculation, 790, 775);
  ctx.fillText(immatriculation, 790, 775);

  lastCanvasData = canvas.toDataURL("image/png");

  percent = 100;
  loadingBar.style.width = percent + "%";
  loadingText.textContent = "Terminé !";
  setTimeout(()=>{ loadingBarContainer.style.display = "none"; loadingText.textContent=""; }, 500);
});

btnDownload.addEventListener("click", () => {
  if(!lastCanvasData){
    alert("Cliquez sur 'Générer' d'abord !");
    return;
  }
  const link = document.createElement("a");
  link.download = "carte_grise.png";
  link.href = lastCanvasData;
  link.click();
});
</script>

</body>
</html>
